[
	{
		"asm": "HALT",
		"byte": "0x00",
		"syntax": "HALT",
		"implemented": true,
		"description": "Halts execution."
	},
	
	{
		"asm": "BRKP",
		"byte": "0x01",
		"syntax": "BRKP",
		"implemented": true,
		"description": "Breakpoint for execution"
	},
	
	{
		"asm": "MOV",
		"byte": "0x02",
		"syntax": "MOV ra rb",
		"implemented": true,
		"description": "Copies the contents of rb into ra."
	},

	{
		"asm": "NRS",
		"byte": "0x0A",
		"syntax": "NRS",
		"implemented": true,
		"description": "Changes current register set to next in order."
	},

	{
		"asm": "PRS",
		"byte": "0x0B",
		"syntax": "PRS",
		"implemented": true,
		"description": "Changes current register set to previous in order."
	},

	{
		"asm": "MOVS",
		"byte": "0x0C",
		"syntax": "MOVS ra rb rc",
		"implemented": true,
		"description": "Moves (copies) register rc from register set rb to register rc in register set ra"
	},

	{
		"asm": "ZERO",
		"byte": "0x10",
		"syntax": "ZERO ra",
		"implemented": true,
		"description": "Multiplies ra with 0."
	},

	{
		"asm": "ADD",
		"byte": "0x11",
		"syntax": "ADD ra rb rc",
		"implemented": true,
		"description": "ra = rb + rc"
	},

	{
		"asm": "SUB",
		"byte": "0x12",
		"syntax": "SUB ra rb rc",
		"implemented": true,
		"description": "ra = rb - rc"
	},

	{
		"asm": "MUL",
		"byte": "0x13",
		"syntax": "MUL ra rb rc",
		"implemented": true,
		"description": "ra = rb * rc"
	},

	{
		"asm": "DIV",
		"byte": "0x14",
		"syntax": "DIV ra rb rc",
		"implemented": true,
		"description": "ra = rb / rc"
	},

	{
		"asm": "MOD",
		"byte": "0x15",
		"syntax": "MOD ra rb rc",
		"implemented": true,
		"description": "ra = rb mod rc"
	},

	{
		"asm": "POW",
		"byte": "0x16",
		"syntax": "POW ra rb rc",
		"implemented": true,
		"description": "ra = rb<sup>rc</sup>"
	},

	{
		"asm": "ADDU",
		"byte": "0x19",
		"syntax": "ADDU ra rb rc",
		"implemented": true,
		"description": "ra = rb + rc (unsigned)"
	},

	{
		"asm": "SUBU",
		"byte": "0x1A",
		"syntax": "SUBU ra rb rc",
		"implemented": true,
		"description": "ra = rb - rc (unsigned)"
	},

	{
		"asm": "MULU",
		"byte": "0x1B",
		"syntax": "MULU ra rb rc",
		"implemented": true,
		"description": "ra = rb * rc (unsigned)"
	},

	{
		"asm": "DIVU",
		"byte": "0x1C",
		"syntax": "DIVU ra rb rc",
		"implemented": true,
		"description": "ra = rb / rc (unsigned)"
	},

	{
		"asm": "MODU",
		"byte": "0x1D",
		"syntax": "MODU ra rb rc",
		"implemented": true,
		"description": "ra = rb mod r (unsigned)c"
	},

	{
		"asm": "POWU",
		"byte": "0x1E",
		"syntax": "POWU ra rb rc",
		"implemented": true,
		"description": "ra = rb<sup>rc</sup> (unsigned)"
	},
	
		{
		"asm": "ADDI",
		"byte": "0x21",
		"syntax": "ADD ra imm",
		"implemented": true,
		"description": "ra = ra + imm"
	},

	{
		"asm": "SUBI",
		"byte": "0x22",
		"syntax": "SUB ra imm",
		"implemented": true,
		"description": "ra = ra - imm"
	},

	{
		"asm": "MULI",
		"byte": "0x23",
		"syntax": "MUL ra imm",
		"implemented": true,
		"description": "ra = ra * imm"
	},

	{
		"asm": "DIVI",
		"byte": "0x24",
		"syntax": "DIV ra imm",
		"implemented": true,
		"description": "ra = ra / imm"
	},

	{
		"asm": "MODI",
		"byte": "0x25",
		"syntax": "MOD ra imm",
		"implemented": true,
		"description": "ra = ra mod imm"
	},

	{
		"asm": "POWI",
		"byte": "0x26",
		"syntax": "POW ra imm",
		"implemented": true,
		"description": "ra = ra^imm"
	},

	{
		"asm": "ADDUI",
		"byte": "0x29",
		"syntax": "ADDU ra imm",
		"implemented": true,
		"description": "ra = ra + imm (unsigned)"
	},

	{
		"asm": "SUBUI",
		"byte": "0x2A",
		"syntax": "SUBU ra imm",
		"implemented": true,
		"description": "ra = ra - imm (unsigned)"
	},

	{
		"asm": "MULUI",
		"byte": "0x2B",
		"syntax": "MULU ra imm",
		"implemented": true,
		"description": "ra = ra * imm (unsigned)"
	},

	{
		"asm": "DIVUI",
		"byte": "0x2C",
		"syntax": "DIVU ra imm",
		"implemented": true,
		"description": "ra = ra / imm (unsigned)"
	},

	{
		"asm": "MODUI",
		"byte": "0x2D",
		"syntax": "MODU ra imm",
		"implemented": true,
		"description": "ra = ra mod imm (unsigned)"
	},

	{
		"asm": "POWUI",
		"byte": "0x2E",
		"syntax": "POWU ra imm",
		"implemented": true,
		"description": "ra = ra<sup>imm</sup> (unsigned)"
	},

	{
		"asm": "AND",
		"byte": "0x31",
		"syntax": "AND ra rb rc",
		"implemented": true,
		"description": "ra = rb & rc"
	},

	{
		"asm": "OR",
		"byte": "0x32",
		"syntax": "OR ra rb rc",
		"implemented": true,
		"description": "ra = rb | rc"
	},

	{
		"asm": "XOR",
		"byte": "0x33",
		"syntax": "OR ra rb rc",
		"implemented": true,
		"description": "ra = rb ^ rc"
	},

	{
		"asm": "INV",
		"byte": "0x34",
		"syntax": "INV ra rb rc",
		"implemented": true,
		"description": "ra = rb with bits inverted"
	},

	{
		"asm": "LSH",
		"byte": "0x35",
		"syntax": "INV ra rb rc",
		"implemented": true,
		"description": "ra = rb << rc"
	},

	{
		"asm": "RSH",
		"byte": "0x36",
		"syntax": "INV ra rb rc",
		"implemented": true,
		"description": "ra = rb >> rc"
	},
	
	{
		"asm": "MALC",
		"byte": "0x50",
		"syntax": "MALC ra rb",
		"description": "Set ra to address of newly allocated memory containing rb bytes"
	},
	
	{
		"asm": "FREE",
		"byte": "0x5F",
		"syntax": "MALC ra",
		"description": "Frees the memory pointed at by ra previously allocated by MALC"
	},

	{
		"asm": "LDW",
		"byte": "0x51",
		"syntax": "LDW ra rb rc",
		"implemented": false,
		"description": "ra = M[rb+rc] (word starting at that address)"
	},

	{
		"asm": "LDB",
		"byte": "0x52",
		"syntax": "LDB ra rb rc",
		"implemented": false,
		"description": "ra = first byte of M[rb+rc]"
	},

	{
		"asm": "LDI",
		"byte": "0x53",
		"syntax": "LDI ra immediate",
		"implemented": true,
		"description": "ra = immediate"
	},
	
	{
		"asm": "LDIL",
		"byte": "0x54",
		"syntax": "LDI ra immediate",
		"implemented": true,
		"description": "low bits of ra = immediate"
	},
	
	{
		"asm": "LDIH",
		"byte": "0x55",
		"syntax": "LDI ra immediate",
		"implemented": true,
		"description": "high bits of ra = immediate << 16"
	},

	{
		"asm": "STW",
		"byte": "0x53",
		"syntax": "STW ra rb rc",
		"implemented": false,
		"description": "M[rb+rc] = ra"
	},

	{
		"asm": "STB",
		"byte": "0x53",
		"syntax": "STW ra rb rc",
		"implemented": false,
		"description": "M[rb+rc] = lower byte of ra"
	},

	{
		"asm": "JMP",
		"byte": "0x61",
		"syntax": "JMP ra",
		"implemented": true,
		"description": "Execution jumps to address in ra"
	},

	{
		"asm": "JMPE",
		"byte": "0x62",
		"syntax": "JMPE ra rb rc",
		"implemented": true,
		"description": "Execution jumps to address in ra iff rb = rc"
	},

	{
		"asm": "JMPN",
		"byte": "0x63",
		"syntax": "JMPN ra rb rc",
		"implemented": false,
		"description": "Execution jumps to address in ra iff rb =/= rc"
	},

	{
		"asm": "JMPL",
		"byte": "0x63",
		"syntax": "JMPL ra rb rc",
		"implemented": true,
		"description": "Execution jumps to address in ra iff rb < rc"
	},

	{
		"asm": "JMPLE",
		"byte": "0x63",
		"syntax": "JMPLE ra rb rc",
		"implemented": true,
		"description": "Execution jumps to address in ra iff rb <= rc"
	},

	{
		"asm": "BRA",
		"byte": "0x68",
		"syntax": "BRA ra",
		"implemented": true,
		"description": "Execution jumps to offset in ra"
	},

	{
		"asm": "BRAE",
		"byte": "0x69",
		"syntax": "BRAE ra rb rc",
		"implemented": true,
		"description": "Execution jumps to offset in ra iff rb = rc"
	},

	{
		"asm": "BRAN",
		"byte": "0x6A",
		"syntax": "BRAN ra rb rc",
		"implemented": false,
		"description": "Execution jumps to offset in ra iff rb =/= rc"
	},

	{
		"asm": "BRAL",
		"byte": "0x6B",
		"syntax": "BRAL ra rb rc",
		"implemented": true,
		"description": "Execution jumps to offset in ra iff rb < rc"
	},

	{
		"asm": "BRALE",
		"byte": "0x6C",
		"syntax": "BRALE ra rb rc",
		"implemented": true,
		"description": "Execution jumps to offset in ra iff rb <= rc"
	},

	{
		"asm": "PRNI",
		"byte": "0x81",
		"syntax": "PRNI ra",
		"implemented": true,
		"description": "Prints value in ra formatted as decimal integer"
	},

	{
		"asm": "PRNC",
		"byte": "0x82",
		"syntax": "PRNC ra",
		"implemented": true,
		"description": "Prints value in ra formatted as a ASCII encoded character."
	},
	
	{
		"asm": "PRNII",
		"byte": "0x89",
		"syntax": "PRNI imm",
		"implemented": true,
		"description": "Prints the immediate value formatted as decimal integer"
	},

	{
		"asm": "PRNCI",
		"byte": "0x8a",
		"syntax": "PRNC imm",
		"implemented": true,
		"description": "Prints the immediate value formatted as a ASCII encoded character."
	},
]
